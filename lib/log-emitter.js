// Generated by CoffeeScript 1.7.1
(function() {
  var FolderLogEmitter, FolderWatcher, LogEmitter, TailWatcher, watcher,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  watcher = require('tail-watcher');

  TailWatcher = watcher.TailWatcher;

  FolderWatcher = watcher.FolderWatcher;

  LogEmitter = (function() {
    function LogEmitter(filepath) {
      this.use = __bind(this.use, this);
      var tail;
      tail = new TailWatcher(filepath);
      this.outputFunctions = [];
      tail.on('push', (function(_this) {
        return function(data) {
          var item, _i, _len, _ref, _results;
          _ref = _this.outputFunctions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (typeof item === 'function') {
              _results.push(item(data));
            } else if (typeof item === 'object') {
              _results.push(item.emit(data));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      tail.on('error', (function(_this) {
        return function(err) {
          return console.log(err);
        };
      })(this));
    }

    LogEmitter.prototype.use = function(item) {
      return this.outputFunctions.push(item);
    };

    return LogEmitter;

  })();

  FolderLogEmitter = (function() {
    function FolderLogEmitter(folderpath) {
      this.use = __bind(this.use, this);
      var folder;
      folder = new FolderWatcher(folderpath);
      this.outputFunctions = [];
      folder.on('push', (function(_this) {
        return function(data) {
          var item, _i, _len, _ref, _results;
          _ref = _this.outputFunctions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (typeof item === 'function') {
              _results.push(item(data));
            } else if (typeof item === 'object') {
              _results.push(item.emit(data));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      folder.on('error', (function(_this) {
        return function(err) {
          return console.log(err);
        };
      })(this));
    }

    FolderLogEmitter.prototype.use = function(item) {
      return this.outputFunctions.push(item);
    };

    return FolderLogEmitter;

  })();

  exports.LogEmitter = LogEmitter;

  exports.FolderLogEmitter = FolderLogEmitter;

}).call(this);
